import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –í–∞—à —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
BOT_TOKEN = "–í–ê–®_–¢–ï–õ–ï–ì–†–ê–ú_–¢–û–ö–ï–ù"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ø–∞–º—è—Ç–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ë–î –¥–ª—è –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è)
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
categories_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –î–æ—Ö–æ–¥", callback_data="category_income")],
        [InlineKeyboardButton(text="üõçÔ∏è –†–∞—Å—Ö–æ–¥", callback_data="category_expense")],
    ]
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "üí∏ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: –∫–æ–º–∞–Ω–¥–∞ /add\n"
        "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å: –∫–æ–º–∞–Ω–¥–∞ /balance\n"
        "üìÖ –û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü: –∫–æ–º–∞–Ω–¥–∞ /report\n"
    )

# –ö–æ–º–∞–Ω–¥–∞ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@dp.message(Command("add"))
async def add_transaction(message: Message):
    """–ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("category_"))
async def select_category(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥)."""
    category = callback.data.split("_")[1]
    if category == "income":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
    elif category == "expense":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    await callback.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@dp.message(F.text.regexp(r"^\d+(\.\d{1,2})?$"))
async def save_transaction(message: Message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥)."""
    user_id = message.from_user.id
    amount = float(message.text)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in user_data:
        user_data[user_id] = {"income": 0, "expense": 0}

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if "–¥–æ—Ö–æ–¥" in message.reply_to_message.text.lower():
        user_data[user_id]["income"] += amount
        await message.answer(f"–î–æ—Ö–æ–¥ {amount} –¥–æ–±–∞–≤–ª–µ–Ω! üí∏")
    elif "—Ä–∞—Å—Ö–æ–¥" in message.reply_to_message.text.lower():
        user_data[user_id]["expense"] += amount
        await message.answer(f"–†–∞—Å—Ö–æ–¥ {amount} –¥–æ–±–∞–≤–ª–µ–Ω! üõçÔ∏è")

# –ö–æ–º–∞–Ω–¥–∞ /balance –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
@dp.message(Command("balance"))
async def show_balance(message: Message):
    """–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π. –î–æ–±–∞–≤—å—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ /add.")
    else:
        income = user_data[user_id]["income"]
        expense = user_data[user_id]["expense"]
        balance = income - expense
        await message.answer(
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n"
            f"üí∞ –î–æ—Ö–æ–¥: {income}\n"
            f"üõçÔ∏è –†–∞—Å—Ö–æ–¥: {expense}\n"
            f"üìä –ë–∞–ª–∞–Ω—Å: {balance}"
        )

# –ö–æ–º–∞–Ω–¥–∞ /report –¥–ª—è –æ—Ç—á–µ—Ç–∞
@dp.message(Command("report"))
async def show_report(message: Message):
    """–û—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
    user_id = message.from_user.id
    if user_id not in user_data:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞.")
    else:
        income = user_data[user_id]["income"]
        expense = user_data[user_id]["expense"]
        await message.answer(
            f"üìÖ –í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n"
            f"üí∏ –î–æ—Ö–æ–¥: {income}\n"
            f"üõçÔ∏è –†–∞—Å—Ö–æ–¥: {expense}\n"
            f"üíº –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {income - expense}"
        )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    dp.include_router(dp.router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
